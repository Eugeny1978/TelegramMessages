from aiogram import F, Router, types
from aiogram.filters import Command, or_f, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import ReplyKeyboardRemove

from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply_buttons import get_keyboard
from keyboards.inline_buttons import get_inline_buttons
from middlewares.db import CounterMiddleware
import database.orm_queries as queries

admin_router = Router()
admin_router.message.middleware(CounterMiddleware())
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

admin_keyboard = get_keyboard(buttons=["‚ùáÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–æ–≤–∞—Ä", "üçï –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"])
remove_keyboard = get_keyboard(buttons=['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'üü• –û—Ç–º–µ–Ω–∞']) #  https://www.emojiall.com/ru/categories/I

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    image = State()
    product_for_update = None
    messages = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞:',
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:',
        'AddProduct:image': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:'
    }


@admin_router.message(Command("admin"))
async def add_product(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ö–Ω–æ–ø–∫–∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:\n| –î–æ–±–∞–≤–∏—Ç—å –¢–æ–≤–∞—Ä | –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç |", reply_markup=admin_keyboard)

@admin_router.message(F.text.casefold().contains('–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç'))
async def get_assortment_products(message: types.Message, session: AsyncSession):
    await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
    for product in await queries.orm_get_all_products(session):
        await message.answer_photo(
            product.image,
            caption=f"<b>{product.name}</b>\n{product.description}\n–¶–µ–Ω–∞: <b>{round(product.price, 2)}</b> —Ä—É–±.",
            reply_markup=get_inline_buttons(buttons={'–ò–∑–º–µ–Ω–∏—Ç—å': f'update_{product.id}', '–£–¥–∞–ª–∏—Ç—å': f'delete_{product.id}'})
        )

@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    product_id = int(callback.data.split('_')[-1])
    await queries.orm_delete_product(session, product_id)
    await callback.answer('–¢–æ–≤–∞—Ä –£–¥–∞–ª–µ–Ω', show_alert=True)
    await callback.message.answer('–¢–æ–≤–∞—Ä –£–¥–∞–ª–µ–Ω!')

# # –ö–æ–¥ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) -------------------------------------------------------------------------------------

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–∞ - –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router.callback_query(F.data.startswith('update_'), StateFilter(None))
async def update_product(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    product_id = int(callback.data.split('_')[-1])
    # product_id = int(callback.data.replace('update_', ''))
    product_for_update = await queries.orm_get_product(session, product_id)
    AddProduct.product_for_update = product_for_update
    print(str(AddProduct.product_for_update))
    await callback.answer() # –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç - —Ç–∫ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ù–∞–∑–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞', reply_markup=remove_keyboard)
    await state.set_state(AddProduct.name)

 # –î–æ–±–∞–≤–ª–Ω–∏–µ –¢–æ–≤–∞—Ä–∞ - –°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ name
@admin_router.message(F.text.casefold().contains('–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'), StateFilter(None))
async def add_product(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard) # types.ReplyKeyboardRemove()
    await state.set_state(AddProduct.name)

# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@admin_router.message(Command("cancel"), StateFilter('*'))
@admin_router.message(F.text.casefold().contains("–æ—Ç–º–µ–Ω–∞"), StateFilter('*'))
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if not current_state:
        return
    if AddProduct.product_for_update:
        AddProduct.product_for_update = None
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=admin_keyboard)

# –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@admin_router.message(Command("back"), StateFilter("*"))
@admin_router.message(F.text.casefold().contains("–Ω–∞–∑–∞–¥"), StateFilter("*"))
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == AddProduct.name:
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–µ–¥–µ–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ.', reply_markup=admin_keyboard)
        return
    prev_state = None
    for step_state in AddProduct.__all_states__:
        if step_state == current_state:
            await state.set_state(prev_state)
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É:\n{AddProduct.messages[prev_state]}", reply_markup=remove_keyboard)
            return
        prev_state = step_state

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@admin_router.message(F.text, AddProduct.name) # or_f(F.text, F.text == '.')
async def add_name(message: types.Message, state: FSMContext):
    if message.text == '-':
        await state.update_data(name=AddProduct.product_for_update.name)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:
        if len(message.text) > 150:
            await message.reply_to_message(f'–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –ù–∞–∑–≤–∞–Ω–∏—è = 150 —Å–∏–º–≤–æ–ª–æ–≤.\n–í—ã –≤–≤–µ–ª–∏ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –í–≤–æ–¥:')
            return
        await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await state.set_state(AddProduct.description)

# –•–µ–Ω–¥–ª–µ—Ä –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@admin_router.message(AddProduct.name) # –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
async def add_incorrect_name(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.\n–í–≤–µ–¥–∏—Ç–µ –¢–ï–ö–°–¢: –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await message.delete()

# –õ–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ price
@admin_router.message(F.text, AddProduct.description)
async def add_description(message: types.Message, state: FSMContext):
    if message.text == "-":
        await state.update_data(description=AddProduct.product_for_update.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await state.set_state(AddProduct.price)

# –•–µ–Ω–¥–ª–µ—Ä –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@admin_router.message(AddProduct.description)  # –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
async def add_incorrect_description(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.\n–í–≤–µ–¥–∏—Ç–µ –¢–ï–ö–°–¢: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await message.delete()

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ price –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ image
@admin_router.message(F.text, AddProduct.price)
async def add_price(message: types.Message, state: FSMContext):
    if message.text == "-":
        await state.update_data(price=AddProduct.product_for_update.price)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        try: price = round(float(message.text), 2)
        except ValueError:
            await message.reply_to_message('–í–≤–µ–¥–∏—Ç–µ –¶–µ–Ω—É —á–∏—Å–ª–æ–º. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ø–µ–π–∫–∏ - –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å "." (—Ç–æ—á–∫–∞)!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –í–≤–æ–¥:')
            return
        await state.update_data(price=str(price))
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await state.set_state(AddProduct.image)

# –•–µ–Ω–¥–ª–µ—Ä –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è price
@admin_router.message(AddProduct.price) # –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
async def add_incorrect_price(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.\n–í–≤–µ–¥–∏—Ç–µ –¢–ï–ö–°–¢: –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await message.delete()

# –õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@admin_router.message(or_f(F.photo, F.text == "-"), AddProduct.image)
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == "-":
        await state.update_data(image=AddProduct.product_for_update.image)
    else:
        await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    try:
        if AddProduct.product_for_update:
            await queries.orm_update_product(session, data, AddProduct.product_for_update.id)
            info = '–ò–∑–º–µ–Ω–µ–Ω'
        else:
            await queries.orm_add_product(session, data)
            info = '–î–æ–±–∞–≤–ª–µ–Ω'
        await message.answer(f"–¢–æ–≤–∞—Ä {info}", reply_markup=admin_keyboard)
    except Exception:
        await message.answer('–¢–æ–≤–∞—Ä –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö | –û—à–∏–±–∫–∞ –î–æ—Å—Ç—É–ø–∞.', reply_markup=admin_keyboard)
    await state.clear() # –æ—á–∏—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ. —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ # await state.set_state(StateFilter(None))
    AddProduct.product_for_update = None

# –•–µ–Ω–¥–ª–µ—Ä –ï—Å–ª–∏ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è image
@admin_router.message(AddProduct.image) #
async def add_incorrect_image(message: types.Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–û–¢–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=remove_keyboard)
    await message.delete()
